# 这是用于构建混合 C++ (MSVC v143) 和 C# (.NET Framework) 项目的 GitHub Actions 工作流程
# 项目结构：解决方案 智绘教.sln 包含 智绘教.vcxproj (C++) 和 PptCOM.csproj (C#)
# 智绘教.vcxproj 依赖 PptCOM.csproj，并有自定义 Target 复制 DLL 和生成 TLB
# 构建 Release Win32, x64, ARM64 配置，并按要求打包上传 Inkeys.exe

name: Inkeys Build # 工作流程名称

on:
  push:
    branches:
      - main
      - insider # 在 main 和 insider 分支 push 时触发
  pull_request:
    branches:
      - main
      - insider # 在 main 和 insider 分支 pull request 时触发

# 定义一个矩阵策略来构建不同的平台
jobs:
  build:
    # 使用矩阵定义需要构建的平台
    strategy:
      matrix:
        platform: [Win32, x64, ARM64] # 定义需要构建的平台列表。这些名称必须与你在 .sln 文件中定义的平台名称一致！
      # Optional: fail-fast: false 可以让一个平台的构建失败时不立即取消其他平台的构建
      # fail-fast: false

    runs-on: windows-latest # 在最新的 Windows 运行器上执行。这个环境通常预装了 Visual Studio (含 MSVC v143) 和 .NET Framework 构建工具。

    # 步骤1: 拉取代码
    steps:
    - name: Checkout code 
      uses: actions/checkout@v4 # 使用 actions/checkout@v4 Action

    # 步骤2: 设置 MSVC 环境并仅构建智绘教.vcxproj
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    - name: Build project - ${{ matrix.platform }} | Release
      run: msbuild "智绘教\智绘教.vcxproj" /p:Configuration=Release /p:Platform=${{ matrix.platform }} /verbosity:normal
      shell: cmd

    # 步骤3: 打包并压缩产物
    - name: Package and compress artifact - ${{ matrix.platform }}
      shell: pwsh # 使用 PowerShell 脚本
      run: |
        # 确定打包目录名称和源 EXE 路径
        $InnerFolderName = ""
        $SourceExePath = ""
        if ("${{ matrix.platform }}" -eq "Win32") {
          $InnerFolderName = "Inkeys"
          $SourceExePath = ".\Release\Inkeys.exe"
        } elseif ("${{ matrix.platform }}" -eq "x64") {
          $InnerFolderName = "Inkeys64"
          $SourceExePath = ".\x64\Release\Inkeys.exe"
        } elseif ("${{ matrix.platform }}" -eq "ARM64") {
          $InnerFolderName = "InkeysArm64"
          $SourceExePath = ".\ARM64\Release\Inkeys.exe"
        } else {
          Write-Error "Unsupported platform: ${{ matrix.platform }}"
          exit 1
        }

        # 检查源文件是否存在
        if (-not (Test-Path -Path $SourceExePath -PathType Leaf)) {
          Write-Error "Source executable not found at: $SourceExePath"
        }

        # 创建打包目录
        $PackagingDir = "packaging_temp_${{ matrix.platform }}"
        $DestinationFolder = Join-Path $PackagingDir $InnerFolderName
        New-Item -ItemType Directory -Path $DestinationFolder -Force | Out-Null

        # 复制 Inkeys.exe 到目标文件夹
        if (Test-Path -Path $SourceExePath -PathType Leaf) {
            Copy-Item -Path $SourceExePath -Destination $DestinationFolder -Force
        }
        else {
            Write-Warning "Source executable not found, skipping copy: $SourceExePath"
        }

        # 打包为 zip
        $ZipName = "$InnerFolderName.zip"
        $FolderToZip = Join-Path $PackagingDir $InnerFolderName

        if (Test-Path $ZipName) {
          Remove-Item $ZipName -Force
        }
        Compress-Archive -Path $FolderToZip -DestinationPath $ZipName -Force

    # 步骤4: 上传打包好的 Artifact (zip 文件)
    - name: Upload artifact - ${{ matrix.platform }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-zip
        path: ${{ matrix.platform == 'Win32' && 'Inkeys.zip' || (matrix.platform == 'x64' && 'Inkeys64.zip' || 'InkeysArm64.zip') }}
